import os
import pandas as pd
from classes import Bin, Batch, Item, Stack, Defect


def read_instance(id: str = "A1") -> tuple[list[Bin], Batch]:
    """
        Reads in a particular dataset which consists of a batch and a defect table.
    """
    dataset = id[0]

    # Path to the main datasets folder
    base_path = 'datasets'

    # Directory of the dataset
    dataset_path = f'dataset_{dataset}'

    # Instance of the dataset
    batch_file = f'{id}_batch.csv'
    defects_file = f'{id}_defects.csv'

    # Read batches
    batch_file_path = os.path.join(base_path, dataset_path, batch_file)
    batch = read_batch(batch_file_path)

    # Read defects
    defects_file_path = os.path.join(base_path, dataset_path, defects_file)
    bins = read_defects(defects_file_path)

    # returns the dataset
    return bins, batch
    
def read_batch(file_path: str) -> Batch:
    """
        Generated by ChatGPT
        Read batches.csv and retuns a batch
    """
    # Read the CSV file
    df = pd.read_csv(file_path, sep=';')

    # Create a dictionary to group items by stack
    stacks_dict = {}

    # Iterate over each row in the dataframe
    for _, row in df.iterrows():
        # Create an Item object for each row
        item = Item(
            id=row['ITEM_ID'],
            width=row['WIDTH_ITEM'],
            length=row['LENGTH_ITEM']
        )
        
        # Add the item to the correct stack
        stack_id = row['STACK']
        
        if stack_id not in stacks_dict:
            stacks_dict[stack_id] = []
        
        stacks_dict[stack_id].append(item)

    # Convert stacks to a list of Stack objects
    stacks = [Stack(id=stack_id, sequence=tuple(items)) for stack_id, items in stacks_dict.items()]

    # Create a Batch object
    batch = Batch(stacks=stacks)

    # return the batch object with the data
    return batch


def read_defects(file_path: str) -> list[Bin]:
    """
        Generated by ChatGPT
        Read defects.csv and returns a tuple of bins
    """
    # Read the CSV file
    df = pd.read_csv(file_path, sep=';')

    # Dictionary to group defects by Bin (plate)
    bins_dict = {}

    # Iterate over each row in the dataframe
    for _, row in df.iterrows():
        # Create a Defect object for each row
        defect = Defect(
            id=row['DEFECT_ID'],
            x=int(float(row['X'])),
            y=int(float(row['Y'])),
            width=int(float(row['WIDTH'])),
            height=int(float(row['HEIGHT']))
        )
        
        # Get the bin (plate) ID
        bin_id = row['PLATE_ID']
        
        # Group defects by bin (plate)
        if bin_id not in bins_dict:
            bins_dict[bin_id] = []
        
        bins_dict[bin_id].append(defect)

    # Create Bin objects from the grouped defects
    bins = [Bin(id=bin_id, defects=defects) for bin_id, defects in bins_dict.items()]

    # Now 'bins' contains a list of Bin objects with associated defects
    return bins
    